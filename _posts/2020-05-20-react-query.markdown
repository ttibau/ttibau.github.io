      

---
title:  "O poder do react-query e em que ele pode me ajudar"
date:   2020-05-20 15:04:23
categories: [react]
tags: [react, react-query, intermediary]
---
O react-query √© uma biblioteca para fazer fetching em APIs com um gerenciamento de estado seguindo uma metodologia diferente do que estamos habituados a ver que √© a famigerada **arquitetura flux**.

![React Query](https://react-query.tanstack.com/\_next/static/images/logo-a65f848e05592e7de1dc2150454230fa.svg)

  

## O poder do react-query e em que ele pode me ajudar.

O grande problema da arquitetura flux √© que ela acaba criando uma c√≥pia do estado do server-side no client-side e o frontend acaba manipulando esta c√≥pia criada, o que pode acarretar em problemas se o client-side n√£o refletir em algum momento corretamente esse estado para o server-side.

Com isso, o react-query al√©m de resolver este problema, consegue salvar em cache nossas responses, quando precisamos do dado atualizado basta dar um **invalidate** que a query √© recarregada automaticamente. Veremos isso mais pra frente para tornar mais claro. 

Como o intuito deste post √© ter mais um **hands-on**, vamos por a m√£o na massa para tornar o post mais din√¢mico üòä. 

#### Instalando o react query:
```
npm install react-query 
// ou 
yarn add react-query
```

#### Criando o provider:

A primeira coisa que precisamos √© envolver nossa aplica√ß√£o em um provider para que ela tenha acesso √†s funcionalidades do react-query. 
**Irei fazer um post falando a respeito de abstra√ß√£o de providers mais pra frente** por aqui mesmo. Isso vai possibilitar termos um provider gen√©rico que abstrai a inclus√£o de um novo provider sempre que for fazer um teste unit√°rio ou qualquer outra coisa que necessite de um provider com **QueryClient** diferente. 

````javascript
import {
	QueryClient
	QueryClientProvider
} from 'react-query';


function MyApp() {
	 const queryClient = new QueryClient();
	 return (
	 	<QueryClientProvider client={queryClient}>
			// Sua aplica√ß√£o aqui
		</QueryClientProvider>
	 )
}

````

N√≥s conseguimos tamb√©m definir algumas configura√ß√µes para nosso QueryClient, √© um pouco do que falamos de abstrair nosso provider em um provider gen√©rico, mas isso √© pra outro post üòÖ. Uma configura√ß√£o que eu acho relevante √© a ```refetchOnWindowFocus```, uma configura√ß√£o padr√£o do react-query √© fazer o refetch quando a janela √© focada, ou seja, se voc√™ sair da janela e voltar, ele faria novamente as requests desnecess√°riamente e geralmente no nosso caso n√£o precisamos disso.  Ent√£o vamos aproveitar para refazer o c√≥digo acima com a configura√ß√£o do QueryClient: 
````javascript
import {
	QueryClient
	QueryClientProvider
} from 'react-query';


function MyApp() {
	 const queryClient = new QueryClient({
	 	defaultOptions: {
			queries: {
				refetchOnWindowFocus: false
			}
		}
	 });
	 return (
	 	<QueryClientProvider client={queryClient}>
			// Sua aplica√ß√£o aqui
		</QueryClientProvider>
	 )
}

````

#### Configurando um componente simples:
Para servir de exemplo, vamos simular que temos uma requisi√ß√£o simples usando **axios**, vou usar um exemplo de uma API que retorna dados da NBA (pq gosto mt ü§ì): 

```javascript
import axios from 'axios';

export const getNBAStats = () => {
	const { data } = axios.get('myFakeApi');
	return data;
}
```

Agora vamos criar nosso componente, no final vou deixar um b√¥nus que pode servir de melhoria na organiza√ß√£o das queries e requests. 

````typescript
import React from 'react'; 
import { getNBAStats } from 'myAPi';

function FakeApi() {
	const NBAQuery = useQuery('NBAQueryKey', getNBAStats) // Vamos falar desta key jaj√°
	return (
		<>
			{NBAQuery.data.map(nbaStats => (
				<div key={nbaStats.id}>
					{nbaStats.points}
				</div>
			))}
		</>
	)
}
````

#### Lidando com feedbacks:
O react-query disponibiliza pra n√≥s alguns status da query, com isso conseguimos fazer um handler melhor dos status, s√£o eles: 
```success```, ```error```, ```idle``` e ```loading```